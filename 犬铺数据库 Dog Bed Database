犬铺数据库
Dog Bed Database
译者：陈楚材
介绍
DBDB是一个Python库，它实现了一个简单的k/v数据库。它允许用户把一个值（value）和一个关键字（key）关联，并且把这种关联存盘以供后续检索使用。
DBDB可以保存数据以免受电脑奔溃和故障情形的影响。它同时也避免了一次性把全部数据存在RAM中，从而使得用户可以存储超过RAM体积的数据量。
内存
	我还记得我第一次被一个bug困住的情形。当我写完一个BASIC程序来运行它时，屏幕上奇怪地闪耀起了一些像素点，然后程序提前退出了。于是我回过头去看代码才发现程序的后面几行消失了。
	我老妈的一个朋友懂编程，所以我就打了个电话请教。跟她讨论了几分钟后，我意识到了问题所在：程序太大了，已经越界侵犯到了显存的空间。清除屏幕截断程序，并且闪光是Applesoft BASIC的存储程序状态在RAM中超出程序尾端的行为的提示。
	从此之后，我就关注到了内存的分配。我学习了指针和使用malloc分配内存。还学会了我程序的数据结构是如何在内存中布局的。并且我还学会了非常非常小心的去操作内存空间。
	许多年后，在学习一门叫Erlang的面向过程的语言，它可以在进程之间传递信息时不用拷贝数据，因为这中间所有数据都是不可变的。后来我还发现Clojure中也有不可变的数据结构，然后就真的沉浸下去了。
	2013年我读到关于CouchDB，很有意思，明白了管理变化的复杂数据的结构和机制。
	我意识到可以设计一套围绕不可变数据的系统。
	于是我同意了写一章书。
	我觉得去讲述CouchDB的核心数据的存储概念会很有趣，当我吃透了它们。
	当我尝试写一个二叉树算法关于在某些位置改变树的时候，被这个工作的复杂度搞得很沮丧。大量的边界情形和尝试理清楚改变书的一部分对另一部分的影响真是搞碎俺的小心脏了。我完全不知道该怎么去解释这些。
	记住了这些教训，我看了眼一种更新不可变二叉树的递归算法，发现它其实也不复杂。
	我又学习了一把，理清楚不变化的东西要简单得多。
	言归正传。
为什么有趣呢？
	大部分工程需要用到某种数据库。你真不需要自己去亲自实现一个；会有很多边界情形让你头疼，即使是把json写盘：
1）	文件系统的磁盘空间耗尽了会发生啥子？
2）	存盘的时候笔记本电池没电了又会如何？
3）	数据量超过了可用内存大小又会怎样？（这个很少会发生在运行在在现代的台式机的应用程序上面。。。但是可能会发生在移动设备或者服务器端的web程序上）
然而，如果你想理解一个数据库是如何处理这些问题的，自己动手写一个这样的小东西还是很有意思的。
	我们这里讨论的技术和概念应该对任何问题点是可用的，当遇到故障（失败）时需要合理的可预见的方式来化解。
	说到故障（失败）。。。好心塞。。。
关于故障
	数据库经常被描述为多么坚守ACID原则：原子性，一致性，隔离性，持久性。
犬铺数据库DBDB中的更新操作是原子的和持久的，有两个属性会在后面的章节中讲述。DBDB不保证数据一致性，它对所保存的数据也没有限制。它也不保证隔离性。
应用程序的代码当然也可以通过自己实现来保证数据一致性，但是隔离性需要有事务管理器。我们这里不打算实现这一点；但是，你可以通过CircleDB章节来学习更多关于事务管理的知识。
	我们也要考虑系统维护性的问题。在这个数据库的实现中，旧数据不会被回收，所以重复的更新（即使是针对同一个key）最终也会消耗掉所有的磁盘空间。（你很快就会发现为什么是这样）PostgreSQL称这种回收为“vacuuming”（吸尘）（这样使得旧的行空间可以被重复利用），CouchDB称之为“compaction”（压紧）（通过重写数据“活的”部分到一个新的文件中，然后自动迁移覆盖到旧的文件之上）。
	DBDB能通过添加压紧的功能而得到更进一步，但是这个还是留作读者来作为练习吧。
DBDB的架构
	DBDB将对“把数据存放在磁盘某处”（数据是如何存放在文件中的；物理层）和数据的逻辑结构（例如二叉树；逻辑层）以及key/value存储的要旨（key a与value foo的关联；公共api）三者的关注和考量分离开来。
	许多的数据库将逻辑层和物理层分离开，因为这种可选的独立实现对获得不同性能特性有帮助，比如DB2的SMS（存在文件系统中的文件）和DMS（原始块设备）表空间，或者MySQL的可选引擎实现。
探索设计
	本书的大部分章节都是讨论一个程序构造从开始到完成。
	然而这并不是我们中的大部分人和手上正在构建的代码的交互方式。我们大部分时候是在思考如何修改或者扩展别人已经写好的代码来实现某些不同的目的。
	在本章中，我们假定DBDB是一个已经完成的工程，我们要了解它是如何工作的。先探索一下整个工程的结构。
组织单位

